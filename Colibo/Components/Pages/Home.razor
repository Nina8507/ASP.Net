@page "/"
@using Colibo.Models
@using Colibo.Service
@inject IMergedData_Service _service
@inject NavigationManager _navManager
@inject ILogger<Home> logger

<h3>Employees</h3>

@if(toShow == null)
{
  <p><em>Loading...</em>></p>
}
else 
{
  <table class="table table-striped">
    <thred>
      <tr>
        <th scope="col">EmployeeId</th>
        <th scope="col">Name</th>
        <th scope="col">Email</th>
        <th scope="col">Mobile</th>
        <th scope="col">Title</th>
        <th scope="col">Address</th>
        <th scope="col">City</th>
        <th scope="col">Delete</th>
        <th scope="col">Edit</th>
      </tr>
    </thred>

    <tbody>
      @foreach (var p in toShow)
      {
        <tr>
          <td>@p.Id</td>
          <td>@p.FullName</td>
          <td>@p.Email</td>
          <td>@p.Mobile</td>
          <td>@p.JobTitle</td>
          <td>@p.Address</td>
          <td>@p.City</td>
          <td>
            <button @onclick="@(async () => await  DeleteAsync(p.Id!))"></button>
          </td>
          <td>
            <button @onclick="@( () => Update(p.Id!))"></button>
          </td>
        </tr>
      }
    </tbody>
  </table>
}

@code 
{
  private List<MergedUsers> toShow = new();
  private List<MergedUsers> filter = new();

  protected override async Task OnInitializedAsync()
  {
    toShow = await _service.GetAllAsync();
    logger.LogInformation($"List size is: {toShow.Count}");
  }

  private async Task DeleteAsync(string id)
  {
    await _service.DeleteAsync(id);
    var toRemove = toShow.FirstOrDefault(p => p.Id!.Equals(id!));
    toShow.Remove(toRemove!);
  }

  private void Update(string id)
  {
    _navManager.NavigateTo($"Edit/{id}");
  }
}


